{"version":3,"sources":["src/ts/game.ts"],"names":[],"mappings":"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","file":"game.dece72e2.js","sourceRoot":"..","sourcesContent":["// Game constants\nconst GAME_WIDTH = 600;\nconst GAME_HEIGHT = 600; // Square shape\nconst OCTOPUS_WIDTH = 120; // Increased by 50% from 80\nconst OCTOPUS_HEIGHT = 120; // Increased by 50% from 80\nconst SHARK_WIDTH = 60;\nconst SHARK_HEIGHT = 60;\nconst SHARK_SPAWN_INTERVAL = 2000; // milliseconds\nconst INITIAL_FALLING_SPEED = 1.3;\nconst SPEED_INCREMENT = 0.1;\nconst MAX_FALLING_SPEED = 10;\n\n// Game state\ninterface GameState {\n    lives: number;\n    score: number;\n    fallingSpeed: number;\n    gameOver: boolean;\n    currentProblem: MathProblem;\n    sharks: Shark[];\n    octopus: Octopus;\n    lastSharkSpawn: number;\n}\n\n// Math problem\ninterface MathProblem {\n    expression: string;\n    correctAnswer: number;\n    wrongAnswers: number[];\n}\n\n// Shark class\nclass Shark {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    answer: number;\n    isCorrect: boolean;\n    image: HTMLImageElement;\n\n    constructor(x: number, y: number, answer: number, isCorrect: boolean) {\n        this.x = x;\n        this.y = y;\n        this.width = SHARK_WIDTH;\n        this.height = SHARK_HEIGHT;\n        this.answer = answer;\n        this.isCorrect = isCorrect;\n        this.image = new Image();\n        this.image.src = Math.random() < 0.5 ? 'img/shark_1.png' : 'img/shark_2.png';\n    }\n\n    update(speed: number): void {\n        this.y += speed;\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        // Draw shark image\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height);\n        \n        // Draw answer text next to the shark (to the right) in red\n        ctx.fillStyle = 'red';\n        ctx.font = 'bold 22px Arial';\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        const text = String(this.answer);\n        ctx.fillText(text, this.x + this.width + 5, this.y + this.height / 2);\n    }\n}\n\n// Octopus class\nclass Octopus {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    speed: number;\n    movingLeft: boolean;\n    movingRight: boolean;\n    image: HTMLImageElement;\n\n    constructor() {\n        this.width = OCTOPUS_WIDTH;\n        this.height = OCTOPUS_HEIGHT;\n        this.x = (GAME_WIDTH - this.width) / 2;\n        this.y = GAME_HEIGHT - this.height + 200; // Position at bottom with 10px margin\n        this.speed = 6;\n        this.movingLeft = false;\n        this.movingRight = false;\n        this.image = new Image();\n        this.image.src = 'img/octo.png';\n    }\n\n    update(): void {\n        // Get the actual canvas width for proper boundary checking\n        const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n        const canvasWidth = canvas ? canvas.width : GAME_WIDTH;\n        \n        if (this.movingLeft && this.x > 0) {\n            this.x -= this.speed;\n        }\n        \n        if (this.movingRight && this.x < canvasWidth - this.width) {\n            this.x += this.speed;\n        }\n    }\n\n    draw(ctx: CanvasRenderingContext2D): void {\n        // Draw the octopus image\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height);\n    }\n}\n\n// Game class\nclass Game {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    state: GameState;\n    backgroundImage: HTMLImageElement;\n    animationFrameId: number | null = null;\n    \n    constructor() {\n        this.canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n        this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        \n        // Load background image\n        this.backgroundImage = new Image();\n        this.backgroundImage.src = 'img/IMG_2649.jpg';\n        \n        this.resizeCanvas();\n        window.addEventListener('resize', () => this.resizeCanvas());\n        \n        this.state = {\n            lives: 3,\n            score: 0,\n            fallingSpeed: INITIAL_FALLING_SPEED,\n            gameOver: false,\n            currentProblem: this.generateMathProblem(),\n            sharks: [],\n            octopus: new Octopus(),\n            lastSharkSpawn: 0\n        };\n        \n        // Event listeners for keyboard\n        document.addEventListener('keydown', (e) => this.handleKeyDown(e));\n        document.addEventListener('keyup', (e) => this.handleKeyUp(e));\n        \n        // Start the game loop\n        this.gameLoop(0);\n    }\n\n    resizeCanvas(): void {\n        const container = this.canvas.parentElement as HTMLElement;\n        // Make the canvas square-shaped by using the minimum dimension\n        const minDimension = Math.min(container.clientWidth, container.clientHeight);\n        this.canvas.width = minDimension;\n        this.canvas.height = minDimension;\n        \n        // Update octopus position when canvas is resized\n        if (this.state && this.state.octopus) {\n            this.state.octopus.y = this.canvas.height - this.state.octopus.height - 10;\n        }\n    }\n    \n    handleKeyDown(e: KeyboardEvent): void {\n        if (e.key === 'ArrowLeft') {\n            this.state.octopus.movingLeft = true;\n        } else if (e.key === 'ArrowRight') {\n            this.state.octopus.movingRight = true;\n        }\n    }\n    \n    handleKeyUp(e: KeyboardEvent): void {\n        if (e.key === 'ArrowLeft') {\n            this.state.octopus.movingLeft = false;\n        } else if (e.key === 'ArrowRight') {\n            this.state.octopus.movingRight = false;\n        }\n    }\n    \n    generateMathProblem(): MathProblem {\n        const operations = ['+', '-', '*'];\n        let operation = operations[Math.floor(Math.random() * operations.length)];\n        \n        let num1, num2, correctAnswer;\n        \n        switch (operation) {\n            case '+':\n                num1 = Math.floor(Math.random() * 100) + 1;\n                num2 = Math.floor(Math.random() * 100) + 1;\n                correctAnswer = num1 + num2;\n                break;\n            case '-':\n                num1 = Math.floor(Math.random() * 100) + 1;\n                num2 = Math.floor(Math.random() * num1) + 1; // Ensure positive result\n                correctAnswer = num1 - num2;\n                break;\n            case '*':\n                num1 = Math.floor(Math.random() * 12) + 1;\n                num2 = Math.floor(Math.random() * 12) + 1;\n                correctAnswer = num1 * num2;\n                break;\n            default:\n                num1 = Math.floor(Math.random() * 100) + 1;\n                num2 = Math.floor(Math.random() * 100) + 1;\n                correctAnswer = num1 + num2;\n                operation = '+';\n        }\n        \n        const expression = `${num1} ${operation} ${num2}`;\n        \n        // Generate 3 wrong answers\n        const wrongAnswers: number[] = [];\n        while (wrongAnswers.length < 3) {\n            // Generate wrong answer close to the correct one\n            const wrongAnswer: number = correctAnswer + Math.floor(Math.random() * 20) - 10;\n            if (wrongAnswer !== correctAnswer && wrongAnswers.indexOf(wrongAnswer) === -1 && wrongAnswer > 0) {\n                wrongAnswers.push(wrongAnswer);\n            }\n        }\n        \n        document.getElementById('math-problem')!.textContent = expression;\n        \n        return {\n            expression,\n            correctAnswer,\n            wrongAnswers\n        };\n    }\n    \n    spawnSharks(): void {\n        const answers = [...this.state.currentProblem.wrongAnswers, this.state.currentProblem.correctAnswer];\n        this.shuffleArray(answers);\n        \n        const availableWidth = this.canvas.width - SHARK_WIDTH;\n        const segment = availableWidth / 4;\n        \n        for (let i = 0; i < 4; i++) {\n            const isCorrect = answers[i] === this.state.currentProblem.correctAnswer;\n            const x = i * segment + segment / 2 - SHARK_WIDTH / 2;\n            // Add random Y offset between -100px and +100px\n            const yOffset = Math.floor(Math.random() * 200) - 100;\n            const shark = new Shark(x, -SHARK_HEIGHT + yOffset, answers[i], isCorrect);\n            this.state.sharks.push(shark);\n        }\n    }\n    \n    shuffleArray(array: any[]): void {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n    \n    checkCollisions(): void {\n        const octopus = this.state.octopus;\n        \n        for (let i = this.state.sharks.length - 1; i >= 0; i--) {\n            const shark = this.state.sharks[i];\n            \n            // Check if shark has gone off screen\n            if (shark.y > this.canvas.height) {\n                if (shark.isCorrect) {\n                    // Player missed the correct answer\n                    this.state.lives--;\n                    this.updateLivesDisplay();\n                    \n                    if (this.state.lives <= 0) {\n                        this.gameOver();\n                    }\n                }\n                \n                this.state.sharks.splice(i, 1);\n                continue;\n            }\n            \n            // Check collision with octopus\n            if (\n                shark.x < octopus.x + octopus.width &&\n                shark.x + shark.width > octopus.x &&\n                shark.y < octopus.y + octopus.height &&\n                shark.y + shark.height > octopus.y\n            ) {\n                if (shark.isCorrect) {\n                    // Player caught the correct answer\n                    this.state.score++;\n                    this.updateScoreDisplay();\n                    this.state.fallingSpeed = Math.min(\n                        MAX_FALLING_SPEED, \n                        this.state.fallingSpeed + SPEED_INCREMENT\n                    );\n                    this.state.currentProblem = this.generateMathProblem();\n                } else {\n                    // Player caught a wrong answer\n                    this.state.lives--;\n                    this.updateLivesDisplay();\n                    \n                    if (this.state.lives <= 0) {\n                        this.gameOver();\n                    }\n                }\n                \n                // Remove all sharks and spawn new ones\n                this.state.sharks = [];\n                break;\n            }\n        }\n    }\n    \n    updateLivesDisplay(): void {\n        document.getElementById('lives-count')!.textContent = String(this.state.lives);\n    }\n    \n    updateScoreDisplay(): void {\n        document.getElementById('score-count')!.textContent = String(this.state.score);\n    }\n    \n    gameOver(): void {\n        this.state.gameOver = true;\n        \n        // Create game over screen if it doesn't exist\n        let gameOverScreen = document.querySelector('.game-over') as HTMLElement;\n        if (!gameOverScreen) {\n            gameOverScreen = document.createElement('div');\n            gameOverScreen.className = 'game-over';\n            \n            const gameOverTitle = document.createElement('h2');\n            gameOverTitle.textContent = 'Game Over';\n            \n            const gameOverScore = document.createElement('p');\n            gameOverScore.textContent = `Final Score: ${this.state.score}`;\n            \n            const restartButton = document.createElement('button');\n            restartButton.textContent = 'Play Again';\n            restartButton.addEventListener('click', () => this.restart());\n            \n            gameOverScreen.appendChild(gameOverTitle);\n            gameOverScreen.appendChild(gameOverScore);\n            gameOverScreen.appendChild(restartButton);\n            \n            document.querySelector('.game-container')!.appendChild(gameOverScreen);\n        } else {\n            gameOverScreen.querySelector('p')!.textContent = `Final Score: ${this.state.score}`;\n            gameOverScreen.style.display = 'block';\n        }\n        \n        if (this.animationFrameId) {\n            cancelAnimationFrame(this.animationFrameId);\n            this.animationFrameId = null;\n        }\n    }\n    \n    restart(): void {\n        const gameOverScreen = document.querySelector('.game-over') as HTMLElement;\n        if (gameOverScreen) {\n            gameOverScreen.style.display = 'none';\n        }\n        \n        this.state = {\n            lives: 3,\n            score: 0,\n            fallingSpeed: INITIAL_FALLING_SPEED,\n            gameOver: false,\n            currentProblem: this.generateMathProblem(),\n            sharks: [],\n            octopus: new Octopus(),\n            lastSharkSpawn: 0\n        };\n        \n        this.updateLivesDisplay();\n        this.updateScoreDisplay();\n        \n        this.gameLoop(0);\n    }\n    \n    update(timestamp: number): void {\n        // Spawn sharks at intervals\n        if (this.state.sharks.length === 0 || \n            timestamp - this.state.lastSharkSpawn > SHARK_SPAWN_INTERVAL) {\n            this.spawnSharks();\n            this.state.lastSharkSpawn = timestamp;\n        }\n        \n        // Update octopus position\n        this.state.octopus.update();\n        \n        // Update shark positions\n        this.state.sharks.forEach(shark => shark.update(this.state.fallingSpeed));\n        \n        // Check for collisions\n        this.checkCollisions();\n    }\n    \n    draw(): void {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Draw underwater background image\n        this.ctx.drawImage(this.backgroundImage, 0, 0, this.canvas.width, this.canvas.height);\n        \n        // Draw sharks\n        this.state.sharks.forEach(shark => shark.draw(this.ctx));\n        \n        // Draw octopus\n        this.state.octopus.draw(this.ctx);\n    }\n    \n    gameLoop(timestamp: number): void {\n        if (!this.state.gameOver) {\n            this.update(timestamp);\n            this.draw();\n            this.animationFrameId = requestAnimationFrame((time) => this.gameLoop(time));\n        }\n    }\n}\n\n// Initialize the game when window loads\nwindow.addEventListener('load', () => {\n    const game = new Game();\n});"]}